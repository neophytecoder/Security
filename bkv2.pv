free c:channel.  (* declaring a free channel name *)

type id.
type symkey.
type pkey.
type skey.

free a, b, s, d:id.


(* Symetric key cryptography *)
fun ltk(id):symkey [private].		(* public key*)
fun ltpairKey(id,id):symkey [private].		(* public key*)
fun enc(bitstring, symkey):bitstring. 	(* symmetric encryption *)
fun dec(bitstring, symkey):bitstring.	(* symmetric decryption *)
equation forall x:bitstring, y:symkey; dec(enc(x,y),y) = x.

fun symkey2bitstring(symkey):bitstring [typeConverter].
fun bitstring2symk(bitstring):symkey [typeConverter].
fun id2bitstring(id):bitstring [typeConverter].
fun bitstring2id(bitstring):id [typeConverter].
fun bitstring2symkey(bitstring):symkey [typeConverter].

(* hash function *)
fun hash(bitstring):bitstring.

(* Asymmetric key cryptography *)
fun pk(id):pkey.			(* public key*)
fun sk(id):skey [private]. (* sk is a private function, i.e. cannot be applied by the adversary *)
fun aenc(bitstring, pkey):bitstring. 	(* asymmetric encryption *)
fun adec(bitstring, skey):bitstring.	(* asymmetric decryption *)
equation forall x:bitstring, y:id; adec(aenc(x,pk(y)),sk(y)) = x.

event reach.

(*query event(reach()).*)
(*query attacker(new q).*)
query attacker( new q ).

let PA(ia:id, ra:id, idS:id) =
	new na:bitstring;
	out(c, (ia, na));
	in(c, (hash1:bitstring, nbKSA:bitstring) );
	let kSA = ltpairKey(ia,idS) in 
	let nonceB = dec(nbKSA, kSA) in 
	if (hash1 = hash((ra,na) )) then 
		out(c, hash((ia, nonceB)));
	if( not(ia=d) || not(ra=d) ) then  (
		new q:bitstring;
		out(c, enc(q, bitstring2symkey( (na,nonceB) )))
	).

let PB(ib:id, rb:id, idS:id)=
	new nb:bitstring;
	in(c, (idA:id, nonceA:bitstring));
	let kSB = ltpairKey( rb, idS ) in 
	let idAKsb = enc(id2bitstring(idA), kSB) in
	out(c, (rb, idAKsb));
	in(c, kSAkSB:bitstring);
	let kSA = bitstring2symkey( dec(kSAkSB, kSB ) ) in
	let msg1 = (hash( (rb, nonceA) ), enc(nb, kSA)) in
	out(c, msg1);
	in(c, hash2:bitstring);
	if( not(ib=d) || not(rb=d) ) then  (
			new r:bitstring;
			out(c, enc(r, bitstring2symkey( (nonceA,nb) )));
			event reach
	) else (
		event reach
	).
	



(* honest server *)
let Sh(idS:id, k:symkey) =
	in(c, (iB:bitstring, idAKsb:bitstring));
	let idB = bitstring2id(iB) in
	let kSB = ltpairKey( idB, idS ) in 
	let idA = bitstring2id(dec(idAKsb, kSB)) in
	let kSA = ltpairKey( idA, idS  ) in 
	let kSAkSB = enc(symkey2bitstring(kSA), kSB) in
	out(c, kSAkSB).

(* dishonest server *)
let Sd(idS:id, k:symkey) =
	in(c, (iB:bitstring, idAKsb:bitstring));
	let idB = bitstring2id(iB) in
	let kSB = ltpairKey( idB, idS ) in 
	let idA = bitstring2id(dec(idAKsb, kSB)) in
	let kSA = ltpairKey( idA, idS  ) in 
	let kSAkSB = enc(symkey2bitstring(kSA), kSB) in
	out(c, kSAkSB); out(c, kSA); out(c, kSB). 

process ! in(c,r1:id);  PA(a,r1, s) | 
		! in(c,i2:id);  PB(i2,b, s) | 
		! new kabh:symkey; Sh(s, kabh) |
		! new kabdh:symkey; ! in(c,s3:id); Sd(s3, kabdh) |
		out(c,sk(d))
