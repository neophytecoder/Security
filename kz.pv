free c:channel.  (* declaring a free channel name *)

type id.
type symkey.
type pkey.
type skey.

free a, b, d:id.


(* Symetric key cryptography *)
fun ltk(id):symkey [private].		(* public key*)
fun enc(bitstring, symkey):bitstring. 	(* symmetric encryption *)
fun dec(bitstring, symkey):bitstring.	(* symmetric decryption *)
equation forall x:bitstring, y:symkey; dec(enc(x,y),y) = x.

fun symkey2bitstring(symkey):bitstring [typeConverter].
fun bitstring2symk(bitstring):symkey [typeConverter].
fun id2bitstring(id):bitstring [typeConverter].

(* hash function *)
fun hash(bitstring):bitstring.

(* Asymmetric key cryptography *)
fun pk(id):pkey.			(* public key*)
fun sk(id):skey [private]. (* sk is a private function, i.e. cannot be applied by the adversary *)
fun aenc(bitstring, pkey):bitstring. 	(* asymmetric encryption *)
fun adec(bitstring, skey):bitstring.	(* asymmetric decryption *)
equation forall x:bitstring, y:id; adec(aenc(x,pk(y)),sk(y)) = x.

event reach.
event startI(id,id,bitstring).
event acceptI(id,id).
event startR(id,id).
event acceptR(id,id,bitstring).

(*query event(reach()).*)
query x:bitstring; inj-event(acceptR(a,b,x)) ==> inj-event(startI(a,b,x)).
(*query attacker((new q, new r)).*)

(* initiator process *)
let PA(ia:id, ra:id) =
	new na:bitstring;	(* generate nonce na *)
	event startI(ia, ra, na);
	out(c, aenc( (ia, hash(na)) ,pk(ra) ) );	(* a --> b: {<A, hash(Na)>}pk(B) *)
	in(c, msg1:bitstring);						(* b --> a {〈B, 〈hash(Nb), {Nb}Kbs〉〉} pub(A) *)
	let (idb:id, hnb:bitstring, nbkbs:bitstring) = adec(msg1, sk(ia))in 
		out(c, (ia,enc((ra,na,nbkbs),ltk(ia))) );  	(* a --> s: < A, { 〈B, 〈Na,{Nb}Kbs〉〉}pk(Ka) >  *)
	in(c, (kabkas:bitstring, nakab:bitstring));		(* b --> a: 〈{Kab} Kas, {Na} Kab〉 *)
	let (kab:symkey) = bitstring2symk(dec(kabkas, ltk(ia))) in
	let (=na) = dec(nakab, kab) in 
	let (hnbkab:bitstring) = enc(hnb, kab) in
		out(c, hnbkab);			(* a --> b: {hash(Nb)} Kab *)
	event acceptI(ia, ra);
	if( not(ia=d) || not(ra=d) ) then  (  (* the attacker does not communicate with itself*)
		new q:bitstring;					(*check secrecy of kab*)
		out(c, enc(q,  kab))
	).


let PB(ib:id, rb:id) =
	in(c, msg1:bitstring); 		(* a --> b: {〈A, hash(Na)〉} pk(B) *)
	let (ida:id, hna:bitstring) = adec(msg1, sk(rb)) 
		in new nb:bitstring;
	out(c, aenc( (rb, hash(nb), enc(nb, ltk(rb)) ) , pk(ib) ) ); 		(* b --> a: {〈B, 〈hash(Nb), {Nb}Kbs〉〉} pk(A) *)
	in(c, (msg2:bitstring, msg3:bitstring));							(* s -> b: 〈{〈Na, 〈Nb, Kab〉〉)} Kbs, {Kab} Kas〉 *)
	let (na:id, =nb, k:bitstring) = dec(msg2, ltk(rb)) in 
	let (kab:symkey) = bitstring2symk(k) in
	let msg4:bitstring = enc(id2bitstring(na), kab) in
	out(c, (msg3,msg4));											(* b --> a:  〈{Kab} Kas, {Na}Kab〉*)
	in(c, hnbkab:bitstring);										(* a --> b: {hash(Nb)} Kab *)
	if ( hash(nb) = dec(hnbkab, kab) 						(*check that B receives a message from A the same as hash(Nb). *)
		&& ( not(ib=d) || not(rb=d) ) ) then (				(*check that the attacker does not communicate with itself. *)
		event acceptR(ib, rb, nb);
		new r:bitstring;
		out(c, enc(r,  kab))				(* check secrecy of Kab *)
	).


(* honest server *)
let Sh(k:symkey) =
	in(c, (ida:id, msg1:bitstring) );		(* a --> s: {〈A, 〈B, 〈Na,{Nb}Kbs〉〉〉} Kas *)
	let (idb:id, na:bitstring, nbkbs:bitstring) = dec(msg1, ltk(ida)) in
	let nb = dec(nbkbs, ltk(idb)) in 
	let pair1 = enc((na,nb, k),ltk(idb)) in
	let pair2 = enc(symkey2bitstring(k), ltk(ida)) in
	out(c, (pair1,pair2)).	(* s --> b: 〈{〈Na, 〈Nb, Kab〉〉)} Kbs, {Kab} Kas〉
*)


(* dishonest server *)
let Sc(k:symkey) =
	in(c, (ida:id, msg1:bitstring) );
	let (idb:id, na:bitstring, nbkbs:bitstring) = dec(msg1, ltk(ida)) in
	let nb = dec(nbkbs, ltk(idb)) in 
	let pair1 = enc((na,nb, k),ltk(idb)) in
	let pair2 = enc(symkey2bitstring(k), ltk(ida)) in
	out(c, (pair1,pair2));
	out(c, k); out(c, na); out(c, nb); 	(* leaks Kab and nonce *)


(* main process *)
process ! in(c,i1:id); in(c,r1:id); PA(i1,r1) | 
		! in(c,i2:id); in(c,r2:id); PB(i2,r2) | 
		out(c,sk(d)); out(c, ltk(d)) |      (* the attacker leaks its key *)
		! new kabh:symkey; Sh(kabh) | 		(* generate key Kabh for honest server *)
		! new kabc:symkey; Sc(kabc)			(* generate key Kabc for dishonest server *)

