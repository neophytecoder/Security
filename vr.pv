free c:channel.  (* declaring a free channel name *)

type id.
type symkey.
type pkey.
type skey.

free a, b, s, d:id.


(* Symetric key cryptography *)
fun ltk(id):symkey [private].		(* public key*)
fun ltkpair(id,id):symkey [private].		(* public key*)
fun enc(bitstring, symkey):bitstring. 	(* symmetric encryption *)
fun dec(bitstring, symkey):bitstring.	(* symmetric decryption *)
equation forall x:bitstring, y:symkey; dec(enc(x,y),y) = x.

fun symkey2bitstring(symkey):bitstring [typeConverter].
fun bitstring2symk(bitstring):symkey [typeConverter].
fun id2bitstring(id):bitstring [typeConverter].
fun bitstring2id(bitstring):id [typeConverter].
fun bitstring2symkey(bitstring):symkey [typeConverter].

(* hash function *)
fun hash(bitstring):bitstring.

(* Asymmetric key cryptography *)
fun pk(id):pkey.			(* public key*)
fun sk(id):skey [private]. (* sk is a private function, i.e. cannot be applied by the adversary *)
fun aenc(bitstring, pkey):bitstring. 	(* asymmetric encryption *)
fun adec(bitstring, skey):bitstring.	(* asymmetric decryption *)
equation forall x:bitstring, y:id; adec(aenc(x,pk(y)),sk(y)) = x.

event reach.
event startI(id,id,bitstring).
event acceptI(id,id).
event startR(id,id).
event acceptR(id,id,bitstring).

query event(reach()).
(*query attacker((new na, new nb)).*)
(*query attacker( new q ).*)
(*query x:bitstring; inj-event(acceptR(a,b,x)) ==> inj-event(startI(a,b,x)).*)


let PA(ia:id, ra:id) =
	new na:bitstring;
	event startI(ia, ra, na);
	let aKb = aenc(id2bitstring(ia), pk(ra)) in
	out(c, aKb);
	in(c, (p1:bitstring, p2:bitstring));
	let(=ra, nb:bitstring, kab:symkey) = dec(p2, ltk(ia)) in 
	out(c, (p1, enc(nb, kab) ));
	event acceptI(ia, ra).

let PB(ib:id, rb:id)=
	new nb:bitstring;
	event startR(ib, rb);
	in(c, aKb:bitstring);
	let (=ib) = bitstring2id(adec(aKb, sk(rb))) in
	let ABNb = (ib, rb, nb) in 
	let encABNb = enc(ABNb, ltk(rb)) in 
	out(c, (rb, encABNb));
	in(c, (p1:bitstring, p2:bitstring));
	let(=ib, kabstring:bitstring) = dec(p1, ltk(ib)) in 
	let kab:symkey = bitstring2symkey(kabstring) in 
	let (=nb) = dec(p2, kab) in 
	event reach;
	event acceptR(ib, rb, nb).

let Sh() =
	in(c, (idB:id,encABNb:bitstring) );
	let kbs = ltk(idB) in 
	let (idAstr:bitstring, idBstr:bitstring, nb:bitstring) =  dec(encABNb, kbs) in 
	let idA:id = bitstring2id(idAstr) in 
	let (=idB) = bitstring2id(idBstr) in 
	let kas = ltk(idA) in 
	let kab = ltkpair(idA, idB) in 
	let AKab = enc((idA, kab), kbs) in 
	let nbKab = enc((idB, nb, kab), kas) in 
	out(c, (AKab, nbKab) ).

	
process ! in(c,i1:id); ! in(c,r1:id);  PA(a, b) | 
		! in(c,i2:id); ! in(c,r2:id);  PB(a, b) | 
		out(c,sk(d)); out(c,ltk(d))  |
		Sh()
		
		
